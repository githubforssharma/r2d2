{
	"info": {
		"_postman_id": "d04144f0-54ee-4e4d-86b0-4f0ff8c958ff",
		"name": "r2d2",
		"description": "Fake data CRUD API",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "36823908"
	},
	"item": [
		{
			"name": "{resource}",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Fetches an unknown resource",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:resource/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":resource",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "37298670"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://reqres.in/api/:resource/:id",
											"protocol": "https",
											"host": [
												"reqres",
												"in"
											],
											"path": [
												"api",
												":resource",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "37298670"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"id\": -16235227,\n    \"name\": \"veniam nostrud\",\n    \"year\": 79193270,\n    \"color\": \"minim\",\n    \"pantone_value\": \"Ut Lorem\"\n  }\n}"
								}
							]
						},
						{
							"name": "Updates an unknown resource",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:resource/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":resource",
										":id"
									],
									"variable": [
										{
											"key": "resource"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "https://reqres.in/api/:resource/:id",
											"protocol": "https",
											"host": [
												"reqres",
												"in"
											],
											"path": [
												"api",
												":resource",
												":id"
											],
											"variable": [
												{
													"key": "resource"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"updatedAt\": \"consequat in Duis\"\n}"
								}
							]
						},
						{
							"name": "Updates an unknown resource",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:resource/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":resource",
										":id"
									],
									"variable": [
										{
											"key": "resource"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "https://reqres.in/api/:resource/:id",
											"protocol": "https",
											"host": [
												"reqres",
												"in"
											],
											"path": [
												"api",
												":resource",
												":id"
											],
											"variable": [
												{
													"key": "resource"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"updatedAt\": \"consequat in Duis\"\n}"
								}
							]
						},
						{
							"name": "Deletes an unknown resource",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/:resource/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":resource",
										":id"
									],
									"variable": [
										{
											"key": "resource"
										},
										{
											"key": "id"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://reqres.in/api/:resource/:id",
											"protocol": "https",
											"host": [
												"reqres",
												"in"
											],
											"path": [
												"api",
												":resource",
												":id"
											],
											"variable": [
												{
													"key": "resource"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Fetches a resource list",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:resource?page=37298670&per_page=37298670",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":resource"
							],
							"query": [
								{
									"key": "page",
									"value": "37298670"
								},
								{
									"key": "per_page",
									"value": "37298670"
								}
							],
							"variable": [
								{
									"key": "resource"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/:resource?page=37298670&per_page=37298670",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										":resource"
									],
									"query": [
										{
											"key": "page",
											"value": "37298670"
										},
										{
											"key": "per_page",
											"value": "37298670"
										}
									],
									"variable": [
										{
											"key": "resource"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"page\": 53307193,\n  \"per_page\": 80736211,\n  \"total\": 81049647,\n  \"total_pages\": -1714474,\n  \"data\": [\n    {\n      \"id\": -94428572,\n      \"name\": \"sunt\",\n      \"year\": 41768830,\n      \"color\": \"in adipisicing quis dolore labore\",\n      \"pantone_value\": \"nisi nulla adipisicing Ut irure\"\n    },\n    {\n      \"id\": 17513176,\n      \"name\": \"dolor in\",\n      \"year\": 60925147,\n      \"color\": \"occaecat proident deserunt cillum\",\n      \"pantone_value\": \"laborum adipisicing minim nulla in\"\n    }\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Fetches a user",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://reqres.in/api/users/:id",
											"protocol": "https",
											"host": [
												"reqres",
												"in"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "37298670"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"id\": -17180205,\n    \"email\": \"reprehenderit laboris c\",\n    \"first_name\": \"consectetur eiusmod\",\n    \"last_name\": \"cupidatat eu nisi sed officia\",\n    \"avatar\": \"ad mollit sunt\"\n  }\n}"
								}
							]
						},
						{
							"name": "Updates a user",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "https://reqres.in/api/users/:id",
											"protocol": "https",
											"host": [
												"reqres",
												"in"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"updatedAt\": \"consequat in Duis\"\n}"
								}
							]
						},
						{
							"name": "Updates a user",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "https://reqres.in/api/users/:id",
											"protocol": "https",
											"host": [
												"reqres",
												"in"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"updatedAt\": \"consequat in Duis\"\n}"
								}
							]
						},
						{
							"name": "Deletes a user",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://reqres.in/api/users/:id",
											"protocol": "https",
											"host": [
												"reqres",
												"in"
											],
											"path": [
												"api",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Fetches a user list",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?page=37298670&per_page=37298670",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "37298670"
								},
								{
									"key": "per_page",
									"value": "37298670"
								}
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://reqres.in/api/users?page=37298670&per_page=37298670",
									"protocol": "https",
									"host": [
										"reqres",
										"in"
									],
									"path": [
										"api",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "37298670"
										},
										{
											"key": "per_page",
											"value": "37298670"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"page\": 23355876,\n  \"per_page\": 77853441,\n  \"total\": -41757218,\n  \"total_pages\": -28195710,\n  \"data\": [\n    {\n      \"id\": 84840977,\n      \"email\": \"et amet irure esse\",\n      \"first_name\": \"proident mollit\",\n      \"last_name\": \"occaecat enim Duis\",\n      \"avatar\": \"deserunt ipsum minim\"\n    },\n    {\n      \"id\": -1292845,\n      \"email\": \"ullamco minim\",\n      \"first_name\": \"mollit dolor et\",\n      \"last_name\": \"occaecat sit ut officia anim\",\n      \"avatar\": \"u\"\n    }\n  ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "demoall",
			"item": [
				{
					"name": "Registers a user successfully 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User registered successfully, response code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Id returned is 4\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"});",
									"",
									"//var reqBody = JSON.parse(pm.request.body.raw);",
									"//console.log(reqBody);",
									"//console.log(reqBody.email);",
									"//pm.globals.get(\"variable_key\");",
									"",
									"//var resdataId = pm.response.json().id;",
									"//console.log(resdataId);",
									"",
									"pm.test(\"id and token are returned\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"token\");",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"pistol\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/register"
					},
					"response": []
				},
				{
					"name": "User not registered error code 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User not registered successfully, response code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error message is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Note: Only defined users succeed registration\");",
									"});",
									"",
									"pm.test(\"error is returned\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"error\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"eve.bolt@reqres.in\",\n    \"password\": \"pistol\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/register"
					},
					"response": []
				},
				{
					"name": "User without username not registered code 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User not registered successfully, response code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error message is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Missing email or username\");",
									"});",
									"",
									"pm.test(\"error is returned\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"error\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"pistol\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/register"
					},
					"response": []
				},
				{
					"name": "User without password not registered code 400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User not registered successfully, response code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Correct error message is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error).to.eql(\"Missing password\");",
									"});",
									"",
									"pm.test(\"error is returned\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"error\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"email\": \"eve.holt@reqres.in\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/register"
					},
					"response": []
				},
				{
					"name": "Fetches a user list without any query parameter 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Check the values of total, total_pages, per_page is correct in response body\", function () {",
									"    pm.expect(jsonData.total).to.eql(12);",
									"    pm.expect(jsonData.total_pages).to.eql(2);",
									"    pm.expect(jsonData.per_page).to.eql(6);",
									"    pm.expect(jsonData.data.length).to.eql(6);",
									"    pm.expect(jsonData.data).to.have.lengthOf(6);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Verify that the number of records returned in data is equal to per_page mentioned in the request\", function () {",
									"    var dataLen = jsonData.data.length;",
									"    pm.expect(jsonData.per_page).to.eql(dataLen);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "",
									"disabled": true
								},
								{
									"key": "per_page",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetches a user list with query parameter 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var qper_page = pm.request.url.query.find(query => query.key === \"per_page\").value;",
									"var qpage = pm.request.url.query.find(query => query.key === \"page\").value;",
									"console.log(parseInt(qpage));",
									"pm.test(\"Check the values of total, total_pages, per_page is correct in response body\", function () {",
									"    pm.expect(jsonData.total).to.eql(12);",
									"    pm.expect(jsonData.total_pages).to.eql(jsonData.total/jsonData.per_page);",
									"    pm.expect(jsonData.per_page).to.eql(parseInt(qper_page));",
									"});",
									"",
									"pm.test(\"Verify that the number of records returned in data is equal to per_page mentioned in the request\", function () {",
									"    var dataLen = jsonData.data.length;",
									"    pm.expect(jsonData.per_page).to.eql(dataLen);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?page=1&per_page=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetches a user list and checks for a certain user 200 OK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(\"I am running this test\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Records fetched successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var reqBody = pm.request.json;",
									"console.log(reqBody);",
									"",
									"var jsonData = pm.response.json();",
									"console.log(jsonData);",
									"",
									"var qper_page = pm.request.url.query.find(query => query.key === \"per_page\").value;",
									"var num_records = jsonData.data.length;",
									"var user = jsonData.data.find(user => user.id === 2);",
									"pm.test(\"Requested per_page matches with response per_page\", function () {",
									"    pm.expect(jsonData.per_page).to.eql(parseInt(qper_page));",
									"});",
									"",
									"pm.test(\"Correct number of records are returned\", function () {",
									"    pm.expect(jsonData.per_page).to.eql(num_records);",
									"});",
									"",
									"pm.test(\"Correct name is returned\", function () {",
									"    pm.expect(user.first_name).to.eql(\"Janet\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?page=1&per_page=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetches a user successfully 200 OK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Name populated is correct for id=2\", function () {",
									"    pm.expect(jsonData.data.id).to.eql(2);",
									"    pm.expect(jsonData.data.first_name).to.eql(\"Janet\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetches a resource list empty ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Empty resource list is retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Request is successful in retrieving empty resource list\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:resource?page=37298670&per_page=37298670",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":resource"
							],
							"query": [
								{
									"key": "page",
									"value": "37298670"
								},
								{
									"key": "per_page",
									"value": "37298670"
								}
							],
							"variable": [
								{
									"key": "resource"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetches a valid resource list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Total of 12 items are retrieved\", function () {",
									"    pm.expect(jsonData.data.length).to.eql(12);",
									"});",
									"",
									"pm.test(\"Request is successful in retrieving empty resource list\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var qpage = pm.request.url.query.find(query => query.key === \"page\").value;",
									"var qper_page = pm.request.url.query.find(query => query.key === \"per_page\").value;",
									"pm.test(\"Correct page and per_page is returned in the response\", function () {",
									"    pm.expect(jsonData.per_page).to.eql(parseInt(qper_page));",
									"    pm.expect(jsonData.page).to.eql(parseInt(qpage));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/:resource?page=1&per_page=15",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								":resource"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "15"
								}
							],
							"variable": [
								{
									"key": "resource"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetches an unknown resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var pathArray = pm.request.url.path;",
									"console.log(pathArray);",
									"var id = pathArray[pathArray.length-1];",
									"",
									"console.log(id);",
									"pm.test(\"ids in request url path and response match\", function () {",
									"    pm.expect(jsonData.data.id).to.eql(parseInt(id));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/unknown/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"unknown",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetches an unknown resource which is not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"//var pathArray = pm.request.url.path;",
									"//var id = pathArray[pathArray.length-1];",
									"",
									"pm.test(\"JSON response is empty, nothing\", function () {",
									"    pm.expect(jsonData).to.eql({});",
									"});",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/unknown/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"unknown",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "54",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "demorr",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "TC 6 - Test Login successful (Creates a session)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login successful\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"Response contains token\", function () {",
											"    pm.expect(jsonData).to.have.property(\"token\").that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Token is a string\", function () {",
											"    pm.expect(jsonData.token).to.be.a(\"string\");",
											"});",
											"",
											"pm.test(\"Token has the correct value\", function () {",
											"    pm.expect(jsonData.token).to.eql(\"QpwL5tke4Pnpja7X4\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"eve.holt@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/login"
							},
							"response": []
						},
						{
							"name": "TC 7 - Test Login unsuccessful (Login Error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login unsuccessful - Session not created\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code has string Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"JSON response contains error\", function () {",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Error is \\\"Missing password\\\"\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"Missing password\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"peter@klaven\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/login"
							},
							"response": []
						},
						{
							"name": "TC 8 - Test Login unsuccessful due to missing email (Login Error)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login unsuccessful - Session not created\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code has string Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"JSON response contains error\", function () {",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Error is \\\"Missing email or username\\\"\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Missing email\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"pistol\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/login"
							},
							"response": []
						},
						{
							"name": "TC 9 - Test Login unsuccessful due to bad credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login unsuccessful - Session not created\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code has string Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(\"JSON response contains error\", function () {",
											"    pm.expect(jsonData).to.have.property(\"error\").that.is.not.empty;",
											"});",
											"",
											"pm.test(\"Error is \\\"user not found\\\"\", function () {",
											"    pm.expect(jsonData.error).to.eql(\"user not found\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"eve.holt1@reqres.in\",\n    \"password\": \"cityslicka\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/login"
							},
							"response": []
						},
						{
							"name": "TC 10 - Test Create new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status code name has \\\"Created\\\"\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"var reqData = JSON.parse(pm.request.body.raw);",
											"var reqName = reqData.name;",
											"var reqJob = reqData.job;",
											"var jsonData = pm.response.json();",
											"pm.test(\"Response name and job are same as request name and job\", function () {",
											"    pm.expect(jsonData.name).to.eql(\"morpheus\");",
											"    pm.expect(jsonData.job).to.eql(\"leader\");",
											"});",
											"",
											"pm.test(\"Response contains correct fields\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.members([\"name\",\"job\",\"id\",\"createdAt\"]);",
											"});",
											"",
											"pm.collectionVariables.set(\"userID\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"leader\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/users"
							},
							"response": []
						},
						{
							"name": "TC 11 - Test Create new user without username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status code name has \\\"Created\\\"\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"/*var reqData = JSON.parse(pm.request.body.raw);",
											"var reqName = reqData.name;",
											"var reqJob = reqData.job;",
											"var jsonData = pm.response.json();",
											"pm.test(\"Response name and job are same as request name and job\", function () {",
											"    pm.expect(jsonData.name).to.eql(reqData.name);",
											"    pm.expect(jsonData.job).to.eql(reqData.job);",
											"});*/",
											"",
											"/*pm.test(\"Response contains correct fields\", function () {",
											"    pm.expect(Object.keys(jsonData)).to.have.members([\"name\",\"job\",\"id\",\"createdAt\"]);",
											"});*/",
											"",
											"//pm.collectionVariables.set(\"userID\", jsonData.id);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"job\": \"leader\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/users"
							},
							"response": []
						}
					]
				},
				{
					"name": "TC 12 - Test Patch to update user job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name has \\\"OK\\\"\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Job is populated correctly\", function () {",
									"    pm.expect(jsonData.job).to.eql(\"zion resident\");",
									"});",
									"",
									"//To be used to access path variables if URL is like {{baseUrl}}/users/:{{userID}}",
									"var qPath = pm.request.url.variables.all();",
									"console.log(qPath);",
									"var id = qPath[0].key;",
									"console.log(parseInt(id));",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"job\": \"zion resident\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:{{userID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":{{userID}}"
							],
							"variable": [
								{
									"key": "{{userID}}",
									"value": "",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC 13 - Deletes a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,204]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:{{userID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":{{userID}}"
							],
							"variable": [
								{
									"key": "{{userID}}",
									"value": "",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC 14 - Test List users with per_page 12 users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var qParams = pm.request.url.query.find(query => query.key === \"per_page\").value;",
									"var jsonData = pm.response.json();",
									"pm.test(\"Number of records returned = 12\", function () {",
									"    pm.expect(jsonData.per_page).to.eql(parseInt(qParams));",
									"    pm.expect(jsonData.data.length).to.eql(12);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?per_page=12",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "per_page",
									"value": "12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC 15 - Test List users for page 2 and only 4 records",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"var qPage = pm.request.url.query.find(query => query.key === \"page\").value;",
									"var qPerPage = pm.request.url.query.find(query => query.key === \"per_page\").value;",
									"var jsonData = pm.response.json();",
									"pm.test(\"Page returned in the response = 2\", function () {",
									"    pm.expect(jsonData.page).to.eql(parseInt(qPage));",
									"});",
									"pm.test(\"Per Page returned in the response = 4\", function () {",
									"    pm.expect(jsonData.per_page).to.eql(parseInt(qPerPage));",
									"});",
									"pm.test(\"Only 4 records are returned\", function () {",
									"    pm.expect(jsonData.data.length).to.eql(parseInt(qPerPage));",
									"});",
									"pm.test(\"Total pages is now 3\", function () {",
									"    pm.expect(jsonData.total_pages).to.eql(Math.ceil(jsonData.total/parseInt(qPerPage)));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=2&per_page=5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								},
								{
									"key": "per_page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC 16 - Test List users for page 5000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"No data is returned\", function () {",
									"    pm.expect(jsonData.data).to.be.an(\"array\").that.is.empty;",
									"});",
									"",
									"pm.test(\"Length of data array is 0\", function () {",
									"    pm.expect(jsonData.data.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?page=5000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "5000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC 17 - Test Fetch a single user that does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"No records returned\", function () {",
									"    pm.expect(jsonData).to.be.an(\"Object\").that.is.empty;",
									"});",
									"",
									"pm.test(\"No records returned\", function () {",
									"    pm.expect(jsonData).to.have.length = 0;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "55",
									"type": "string"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TC 18 - Test Fetch a single user that exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(\"Response contains correct elements\", function () {",
									"    pm.expect(jsonData).to.be.an(\"Object\").that.is.not.empty;",
									"    pm.expect(Object.keys(jsonData.data)).to.include.members([\"id\",\"email\",\"first_name\"]);",
									"    pm.expect(jsonData.data).to.have.property(\"last_name\");",
									"});",
									"",
									"pm.test(\"Response contains exactly 1 element\", function () {",
									"    pm.expect(jsonData.data).to.have.length = 1;",
									"});",
									"",
									"var pParams = pm.request.url.path;",
									"var idParam = pParams[pParams.length-1];",
									"pm.test(\"id in the response is same as id in the request URL\", function () {",
									"    pm.expect(jsonData.data.id).to.eql(parseInt(idParam));",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "demo1",
			"item": [
				{
					"name": "Registers multiple users successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User registered successfully, response code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Id returned is 4\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(4);",
									"});",
									"",
									"pm.test(\"id and token are returned\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"token\");",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/register"
					},
					"response": []
				}
			]
		},
		{
			"name": "Creates a session",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"tempor dolor nisi\",\n  \"email\": \"officia incididunt enim\",\n  \"password\": \"deserunt laboris\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/login"
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"tempor dolor nisi\",\n  \"email\": \"officia incididunt enim\",\n  \"password\": \"deserunt laboris\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/login"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"token\": \"i\"\n}"
				},
				{
					"name": "Login error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"tempor dolor nisi\",\n  \"email\": \"officia incididunt enim\",\n  \"password\": \"deserunt laboris\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/login"
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"occaecat\"\n}"
				}
			]
		},
		{
			"name": "Creates a user",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"tempor dolor nisi\",\n  \"email\": \"officia incididunt enim\",\n  \"password\": \"deserunt laboris\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/register"
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"tempor dolor nisi\",\n  \"email\": \"officia incididunt enim\",\n  \"password\": \"deserunt laboris\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/register"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"non\",\n  \"token\": \"est fugiat\"\n}"
				},
				{
					"name": "Register error",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"tempor dolor nisi\",\n  \"email\": \"officia incididunt enim\",\n  \"password\": \"deserunt laboris\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/register"
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"error\": \"occaecat\"\n}"
				}
			]
		},
		{
			"name": "Ends a session",
			"request": {
				"method": "POST",
				"header": [],
				"url": "{{baseUrl}}/logout"
			},
			"response": [
				{
					"name": "Success",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": "{{baseUrl}}/logout"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in/api",
			"type": "string"
		},
		{
			"key": "email",
			"value": "initial_value@example.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "initial_password",
			"type": "string"
		},
		{
			"key": "userID",
			"value": "",
			"type": "default"
		}
	]
}